// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	context "context"

	edp "github.com/edsonmichaque/edp-go"
	mock "github.com/stretchr/testify/mock"
)

// ProvidersService is an autogenerated mock type for the ProvidersService type
type ProvidersService struct {
	mock.Mock
}

// CreateProvider provides a mock function with given fields: ctx, input, opts
func (_m *ProvidersService) CreateProvider(ctx context.Context, input *edp.ProviderInput, opts ...edp.Option) (*edp.ProviderOutput, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, input)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *edp.ProviderOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *edp.ProviderInput, ...edp.Option) (*edp.ProviderOutput, error)); ok {
		return rf(ctx, input, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *edp.ProviderInput, ...edp.Option) *edp.ProviderOutput); ok {
		r0 = rf(ctx, input, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*edp.ProviderOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *edp.ProviderInput, ...edp.Option) error); ok {
		r1 = rf(ctx, input, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteProvider provides a mock function with given fields: ctx, id, opts
func (_m *ProvidersService) DeleteProvider(ctx context.Context, id int64, opts ...edp.Option) (*edp.ProviderOutput, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *edp.ProviderOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, ...edp.Option) (*edp.ProviderOutput, error)); ok {
		return rf(ctx, id, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, ...edp.Option) *edp.ProviderOutput); ok {
		r0 = rf(ctx, id, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*edp.ProviderOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, ...edp.Option) error); ok {
		r1 = rf(ctx, id, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProvider provides a mock function with given fields: ctx, id, opts
func (_m *ProvidersService) GetProvider(ctx context.Context, id int64, opts ...edp.Option) (*edp.ProviderOutput, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *edp.ProviderOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, ...edp.Option) (*edp.ProviderOutput, error)); ok {
		return rf(ctx, id, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, ...edp.Option) *edp.ProviderOutput); ok {
		r0 = rf(ctx, id, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*edp.ProviderOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, ...edp.Option) error); ok {
		r1 = rf(ctx, id, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListProviders provides a mock function with given fields: ctx, options, opts
func (_m *ProvidersService) ListProviders(ctx context.Context, options *edp.ListProvidersInput, opts ...edp.Option) (*edp.ListProvidersOutput, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, options)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *edp.ListProvidersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *edp.ListProvidersInput, ...edp.Option) (*edp.ListProvidersOutput, error)); ok {
		return rf(ctx, options, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *edp.ListProvidersInput, ...edp.Option) *edp.ListProvidersOutput); ok {
		r0 = rf(ctx, options, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*edp.ListProvidersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *edp.ListProvidersInput, ...edp.Option) error); ok {
		r1 = rf(ctx, options, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SyncProvider provides a mock function with given fields: ctx, id, opts
func (_m *ProvidersService) SyncProvider(ctx context.Context, id int64, opts ...edp.Option) (*edp.SyncProviderOutput, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *edp.SyncProviderOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, ...edp.Option) (*edp.SyncProviderOutput, error)); ok {
		return rf(ctx, id, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, ...edp.Option) *edp.SyncProviderOutput); ok {
		r0 = rf(ctx, id, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*edp.SyncProviderOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, ...edp.Option) error); ok {
		r1 = rf(ctx, id, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateProvider provides a mock function with given fields: ctx, id, input, opts
func (_m *ProvidersService) UpdateProvider(ctx context.Context, id int64, input *edp.ProviderInput, opts ...edp.Option) (*edp.ProviderOutput, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id, input)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *edp.ProviderOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, *edp.ProviderInput, ...edp.Option) (*edp.ProviderOutput, error)); ok {
		return rf(ctx, id, input, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, *edp.ProviderInput, ...edp.Option) *edp.ProviderOutput); ok {
		r0 = rf(ctx, id, input, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*edp.ProviderOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, *edp.ProviderInput, ...edp.Option) error); ok {
		r1 = rf(ctx, id, input, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewProvidersService creates a new instance of ProvidersService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProvidersService(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProvidersService {
	mock := &ProvidersService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
