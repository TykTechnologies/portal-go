// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	context "context"

	edp "github.com/edsonmichaque/edp-go"
	mock "github.com/stretchr/testify/mock"
)

// OrgsService is an autogenerated mock type for the OrgsService type
type OrgsService struct {
	mock.Mock
}

// CreateOrg provides a mock function with given fields: ctx, input, opts
func (_m *OrgsService) CreateOrg(ctx context.Context, input *edp.OrgInput, opts ...edp.Option) (*edp.OrgOutput, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, input)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *edp.OrgOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *edp.OrgInput, ...edp.Option) (*edp.OrgOutput, error)); ok {
		return rf(ctx, input, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *edp.OrgInput, ...edp.Option) *edp.OrgOutput); ok {
		r0 = rf(ctx, input, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*edp.OrgOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *edp.OrgInput, ...edp.Option) error); ok {
		r1 = rf(ctx, input, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTeam provides a mock function with given fields: ctx, orgId, input, opts
func (_m *OrgsService) CreateTeam(ctx context.Context, orgId int64, input *edp.TeamInput, opts ...edp.Option) (*edp.TeamOutput, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, orgId, input)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *edp.TeamOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, *edp.TeamInput, ...edp.Option) (*edp.TeamOutput, error)); ok {
		return rf(ctx, orgId, input, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, *edp.TeamInput, ...edp.Option) *edp.TeamOutput); ok {
		r0 = rf(ctx, orgId, input, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*edp.TeamOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, *edp.TeamInput, ...edp.Option) error); ok {
		r1 = rf(ctx, orgId, input, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteOrg provides a mock function with given fields: ctx, id, opts
func (_m *OrgsService) DeleteOrg(ctx context.Context, id int64, opts ...edp.Option) (*edp.OrgOutput, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *edp.OrgOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, ...edp.Option) (*edp.OrgOutput, error)); ok {
		return rf(ctx, id, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, ...edp.Option) *edp.OrgOutput); ok {
		r0 = rf(ctx, id, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*edp.OrgOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, ...edp.Option) error); ok {
		r1 = rf(ctx, id, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTeam provides a mock function with given fields: ctx, orgId, teamId, opts
func (_m *OrgsService) DeleteTeam(ctx context.Context, orgId int64, teamId int64, opts ...edp.Option) (*edp.TeamOutput, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, orgId, teamId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *edp.TeamOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64, ...edp.Option) (*edp.TeamOutput, error)); ok {
		return rf(ctx, orgId, teamId, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64, ...edp.Option) *edp.TeamOutput); ok {
		r0 = rf(ctx, orgId, teamId, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*edp.TeamOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, int64, ...edp.Option) error); ok {
		r1 = rf(ctx, orgId, teamId, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrg provides a mock function with given fields: ctx, id, opts
func (_m *OrgsService) GetOrg(ctx context.Context, id int64, opts ...edp.Option) (*edp.OrgOutput, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *edp.OrgOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, ...edp.Option) (*edp.OrgOutput, error)); ok {
		return rf(ctx, id, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, ...edp.Option) *edp.OrgOutput); ok {
		r0 = rf(ctx, id, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*edp.OrgOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, ...edp.Option) error); ok {
		r1 = rf(ctx, id, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTeam provides a mock function with given fields: ctx, orgId, teamId, opts
func (_m *OrgsService) GetTeam(ctx context.Context, orgId int64, teamId int64, opts ...edp.Option) (*edp.TeamOutput, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, orgId, teamId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *edp.TeamOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64, ...edp.Option) (*edp.TeamOutput, error)); ok {
		return rf(ctx, orgId, teamId, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64, ...edp.Option) *edp.TeamOutput); ok {
		r0 = rf(ctx, orgId, teamId, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*edp.TeamOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, int64, ...edp.Option) error); ok {
		r1 = rf(ctx, orgId, teamId, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListOrgs provides a mock function with given fields: ctx, options, opts
func (_m *OrgsService) ListOrgs(ctx context.Context, options *edp.ListOrgsInput, opts ...edp.Option) (*edp.ListOrgsOutput, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, options)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *edp.ListOrgsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *edp.ListOrgsInput, ...edp.Option) (*edp.ListOrgsOutput, error)); ok {
		return rf(ctx, options, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *edp.ListOrgsInput, ...edp.Option) *edp.ListOrgsOutput); ok {
		r0 = rf(ctx, options, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*edp.ListOrgsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *edp.ListOrgsInput, ...edp.Option) error); ok {
		r1 = rf(ctx, options, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTeams provides a mock function with given fields: ctx, orgId, options, opts
func (_m *OrgsService) ListTeams(ctx context.Context, orgId int64, options *edp.ListTeamsInput, opts ...edp.Option) (*edp.ListTeamsOutput, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, orgId, options)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *edp.ListTeamsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, *edp.ListTeamsInput, ...edp.Option) (*edp.ListTeamsOutput, error)); ok {
		return rf(ctx, orgId, options, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, *edp.ListTeamsInput, ...edp.Option) *edp.ListTeamsOutput); ok {
		r0 = rf(ctx, orgId, options, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*edp.ListTeamsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, *edp.ListTeamsInput, ...edp.Option) error); ok {
		r1 = rf(ctx, orgId, options, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateOrg provides a mock function with given fields: ctx, id, input, opts
func (_m *OrgsService) UpdateOrg(ctx context.Context, id int64, input *edp.OrgInput, opts ...edp.Option) (*edp.OrgOutput, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id, input)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *edp.OrgOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, *edp.OrgInput, ...edp.Option) (*edp.OrgOutput, error)); ok {
		return rf(ctx, id, input, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, *edp.OrgInput, ...edp.Option) *edp.OrgOutput); ok {
		r0 = rf(ctx, id, input, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*edp.OrgOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, *edp.OrgInput, ...edp.Option) error); ok {
		r1 = rf(ctx, id, input, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTeam provides a mock function with given fields: ctx, orgId, teamId, input, opts
func (_m *OrgsService) UpdateTeam(ctx context.Context, orgId int64, teamId int64, input *edp.TeamInput, opts ...edp.Option) (*edp.TeamOutput, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, orgId, teamId, input)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *edp.TeamOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64, *edp.TeamInput, ...edp.Option) (*edp.TeamOutput, error)); ok {
		return rf(ctx, orgId, teamId, input, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64, *edp.TeamInput, ...edp.Option) *edp.TeamOutput); ok {
		r0 = rf(ctx, orgId, teamId, input, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*edp.TeamOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, int64, *edp.TeamInput, ...edp.Option) error); ok {
		r1 = rf(ctx, orgId, teamId, input, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewOrgsService creates a new instance of OrgsService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOrgsService(t interface {
	mock.TestingT
	Cleanup(func())
}) *OrgsService {
	mock := &OrgsService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
